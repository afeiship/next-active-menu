{"version":3,"sources":["next-active-menu.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-active-menu.js","sourcesContent":["(function() {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('next-js-core2');\n  var Nxtree = nx.Tree || require('next-tree');\n  var nxTraverse = nx.traverse || require('next-traverse');\n  var nxDeepClone = nx.deepClone || require('next-deep-clone');\n  var pathToRegexp = require('path-to-regexp');\n  var DEFAULT_OPTIONS = { itemsKey: 'children' };\n\n  var NxActiveMenu = nx.declare('nx.ActiveMenu', {\n    methods: {\n      init: function(inItems, inOptions) {\n        this.options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n        this.dataTree = new Nxtree(inItems, this.options);\n      },\n      match: function(inValue) {\n        var current = null;\n        var ancestors = [];\n        this.dataTree.traverse(function(key, item) {\n          var regexp = pathToRegexp(item.value);\n          if (regexp.test(inValue)) {\n            current = item;\n            return nx.BREAKER;\n          }\n        });\n\n        current &&\n          (ancestors = [current].concat(this.dataTree.ancestors(current)));\n        return ancestors.map(function(item) {\n          return item.value;\n        });\n      },\n      active: function(inRoutes) {\n        var results = [];\n        var regRoutes = inRoutes.map(function(route) {\n          return pathToRegexp(route);\n        });\n        var testItem = function(inItem) {\n          return regRoutes.some(function(reg) {\n            return reg.test(inItem.value);\n          });\n        };\n        this.dataTree.traverse(function(key, item) {\n          item.active = testItem(item);\n          item.active && results.push(item);\n        });\n        return results;\n      },\n      serialize: function() {\n        var cloneData = nxDeepClone(this.dataTree.data);\n        nxTraverse(\n          cloneData,\n          function(_, item) {\n            delete item.__parent__;\n            delete item.__children__;\n          },\n          this.options\n        );\n        return cloneData;\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxActiveMenu;\n  }\n})();\n"]}